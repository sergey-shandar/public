/** @typedef {readonly[number, number]} Record */

/** @typedef {readonly[number, number, number]} Record3 */

/** @type {number[]} */
let a = [0]
let size = 0
let bits = 0

// |    0       | 0          |  0 |               |
// |    1..32   | 1          |  1 |         XXXXX |
// |   33..64   | 2 + 1      |  3 |       1_XXXXX |
// |   65..96   | 3 + 1      |  4 |       2_XXXXX |
// | ...        |            |    |               |
// |  993..1024 | 32 + 1     | 33 |   XXXXX_XXXXX |
// | 1025..1056 | 33 + 2 + 1 | 36 | 1_XXXXX_XXXXX |

const findEmpty = (/** @type {number} */i) => {
    let j = 1
    while (true) {
        const n = i ^ j
        if (a[n] === 0) {
            return n
        }
        ++j
    }
}

const object = () => {
    const b = bits
    const mask = (1 << bits) - 1

    /** @type {(x: number) => Record} */
    const unpack = x => [x >> b, x & mask]
    const pack = (/** @type {Record} */[hi, lo]) => (hi << b) | lo
    /** @type {(x: number) => Record3} */
    const unpack3 = x => {
        const [v, n] = unpack(x)
        return [v, v & mask, n]
    }

    return {
        mask,
        unpack,
        unpack3,
        pack,
        add: (/** @type {number} */v) => {
            const [, h] = unpack(v)
            const create = (/** @type {number} */i) => {
                a[i] = pack([v, h])
                ++size
                return false
            }
            const e = a[h]
            // not occupied.
            if (e === 0) {
                return create(h)
            }
            let [ev, i, en] = unpack3(e)
            // occupied by different hash
            if (i !== h) {
                // x = i
                // #h: ev[_, x], en
                const n = findEmpty(i)
                // #n: 0, 0, 0
                while (true) {
                    const [fv, fn] = unpack(a[i])
                    // #i: fv[_, x], fn
                    // #ni: [_, x], _
                    if (fn === h) {
                        //    #i : fv[_, x], fn
                        // #h #fn: ev[_, x], en
                        //    #en:   [_, x], _
                        //    #n :   [0, 0], 0
                        a[i] = pack([fv, n])
                        a[n] = e
                        return create(h)
                        //    #i : fv[_, x], n
                        // #h #fn:  v[_, h], 0
                        //    #en:   [_, x], _
                        //    #n : ev[_, x], en
                    }
                    i = fn
                }
            }
            // occupied by the same hash (i === h)
            // iterate through the list of the hashes
            while (true) {
                // found
                if (ev === v) {
                    return true
                }
                // no transition to the next item
                if (en === h) {
                    const n = findEmpty(h)
                    a[i] = pack([ev, n])
                    return create(n)
                }
                i = en;
                [ev, en] = unpack(a[i])
            }
        }
    }
}

const extend = () => {
    const { unpack: oldUnpack, mask: oldMask } = object()
    // resize
    const oldLength = a.length
    {
        let i = oldLength
        while (i !== 0) {
            --i
            a.push(0)
        }
    }
    const high = 1 << bits
    bits += 1
    //
    const { unpack, pack, unpack3 } = object()
    // change format
    {
        let i = oldLength
        while (i !== 0) {
            --i
            a[i] = pack(oldUnpack(a[i]))
        }
    }
    //
    {
        const updateList = (/** @type {number} */h) => {
            const hh = h | high
            const addHigh = (/** @type {readonly[number, number]} */[v, p]) => {
                const x = a[hh]
                if (x === 0) {
                    p = hh
                } else {
                    p |= high
                    a[p] = x
                }
                a[hh] = pack([v, p])
            }

            let px = a[h]

            if (px === 0) {
                // an empty cell
                return
            }

            let [pv, ph, i] = unpack3(px)
            if (h !== (ph & oldMask)) {
                // not a beginning of a list
                return
            }

            // a beginning of a list

            // move all high-bit items from #h position
            {
                let p = h
                if (ph !== h) {
                    do {
                        addHigh([pv, p])
                        if (i === h) {
                            // no more items in the list `h`
                            a[h] = 0
                            return
                        }
                        px = a[i]
                        a[i] = 0
                        p = i;
                        [pv, ph, i] = unpack3(px)
                    } while (ph !== h)
                    a[h] = px
                }
            }

            {
                let p = h
                while (i !== h) {
                    const [iv, ih, n] = unpack3(a[i])
                    if (ih === h) {
                        p = i
                        pv = iv
                    } else {
                        addHigh([iv, i])
                        a[p] = pack([pv, n])
                        a[i] = 0
                    }
                    i = n
                }
            }
        }

        let h = oldLength
        while (h !== 0) {
            --h
            updateList(h)
        }
    }
}

const print = () => {
    const { unpack } = object()
    for (const [i, e] of a.entries()) {
        const [vh, n] = unpack(e)
        console.log(i.toString(16), vh.toString(16), n.toString(16))
    }
}

const add = (/** @type {number} */x) => {
    if (size === a.length) {
        extend()
        console.log('------------')
        print()
    }
    return object().add(x)
}

const t = [
    /*
    0xb494, 0x5798, 0x0574, 0xcbdd, 0x7cf1, 0xb144, 0xccf1, 0x4247, 0xb7c9, 0x7013, 0xf53b, 0x4342, 0x7aac, 0x2c66, 0x2c3d, 0x927f,
    0xfbe0, 0xd0e5, 0x4ea8, 0x6aee, 0x7db5, 0x0036, 0xb369, 0xafdb, 0x20e7, 0x6cc9, 0x2d66, 0x86f9, 0x38a0, 0x612d, 0xf445, 0xb3aa,
    0xecf5, 0x7347, 0xf133, 0x4ad5, 0xf9f1, 0x29fa, 0x1ff2, 0xbda4, 0x0d1e, 0x914d, 0xd0f1, 0x831c, 0xf30b, 0xa369, 0xda38, 0x8813,
    0xf355, 0x9597, 0x12ae, 0x7471, 0xa461, 0x6308, 0xd203, 0xda0a, 0x5c2f, 0xc8ed, 0x450a, 0x219a, 0x1012, 0x6f64, 0x6a87, 0xabc5,
    0x77a7, 0x2e73, 0x9653, 0x87d7, 0xdaef, 0x0cdb, 0xaa88, 0xa157, 0x8d61, 0xf310, 0xffcb, 0xe2d1, 0x177a, 0x0e9f, 0xfab3, 0xcaef,
    0x81e1, 0x22cc, 0x6b19, 0x2263, 0xcc48, 0x096b, 0xab9f, 0x60fa, 0x9d37, 0x4469, 0x051b, 0xc850, 0x3276, 0x142a, 0x1362, 0xf822,
    0xc4be, 0x57bd, 0x72ee, 0xe975, 0x46f7, 0xb525, 0x13bc, 0x8cb5, 0x0bd0, 0xc898, 0xad90, 0xb6b0, 0xfd46, 0xf2b3, 0x509c, 0xb896,
    0x364a, 0xcb39, 0xf0d0, 0xa670, 0x723d, 0xa1d5, 0xedee, 0x2f93, 0xd67d, 0x3422, 0x76b8, 0xa0f8, 0x265e, 0xa0be, 0x732d, 0xa534,
    0xb612, 0xecc7, 0x81c6, 0x42f5, 0xb0dd, 0xe198, 0xa4ee, 0x96bc, 0xbc17, 0xe67e, 0xac00, 0xfee6, 0x287c, 0x58db, 0x7543, 0x4a51,
    0x24ad, 0xb982, 0x4dca, 0xebff, 0x2a16, 0xd093, 0x37f8, 0x2d06, 0x1af5, 0xe383, 0x447e, 0xab4c, 0x9994, 0xa250, 0xa4aa, 0x477f,
    0x8356, 0x8c0d, 0xb101, 0x54f0, 0x6cfd, 0x05c3, 0x84f7, 0x2374, 0x1b2e, 0x7d45, 0xe766, 0x39be, 0xcd6d, 0xc1c0, 0x0fd9, 0xed6e,
    0x4d80, 0x7b32, 0x7bd9, 0x9845, 0x5e7a, 0xe9d2, 0xae44, 0x75c6, 0x7ff3, 0x00f1, 0x8dd1, 0x5fb0, 0x8b42, 0x01da, 0x35cd, 0x11b8,
    0xbf15, 0xcfe1, 0x7fdb, 0x2b39, 0x804e, 0xca7b, 0x9402, 0xe15b, 0xe00c, 0xfe93, 0xd5eb, 0xfb86, 0x93be, 0x6ff9, 0xc1a9, 0x89a1,
    0x58cd, 0x9b5c, 0xd4c6, 0x7df6, 0xb465, 0xb15c, 0x21b4, 0x623c, 0xf97a, 0xd0ce, 0x7cd1, 0x29e3, 0x304a, 0x981c, 0xb422, 0x53a4,
    0xf22f, 0x15a6, 0xfec3, 0x3291, 0xf24e, 0x031a, 0xa506, 0xf90c, 0x99e6, 0xddab, 0xfa64, 0x764c, 0x498f, 0x3d6d, 0xa5a0, 0xa725,
    0xf057, 0x9a95, 0xccc3, 0x3969, 0x8fd6, 0x9356, 0x1e70, 0x0ed7, 0xc8d9, 0x5d9f, 0x3561, 0x40ae, 0x2f3d, 0x4b04, 0x8171, 0x205b,
    */
   /*
    0x11ed, 0x584d, 0x86a4, 0xd0e0, 0x778d, 0x0bb5, 0x471e, 0xd678, 0x7676, 0x9fa1, 0xab9f, 0xcf07, 0xb91c, 0x8d10, 0xc15a, 0xd01f,
    0xb721, 0xf7bb, 0x198e, 0xf79b, 0x3a50, 0x2473, 0x6467, 0x5fb5, 0x3203, 0x4c76, 0xa826, 0xa75e, 0x6307, 0x0846, 0x7259, 0xfe30,
    0x4571, 0x6830, 0xc37a, 0x7a8f, 0xdfe8, 0xd932, 0x8111, 0x663d, 0x04b7, 0xfecc, 0x696b, 0x1a84, 0xf997, 0x417d, 0x702d, 0xef80,
    0x6555, 0x91e9, 0xcf97, 0x11f2, 0x944a, 0x3857, 0x6dd8, 0x23e7, 0xa8a8, 0xdbf3, 0x3e3a, 0xb8a4, 0xe8fb, 0xed34, 0x0e3c, 0x9e5a,
    0x1913, 0xa609, 0xb7dd, 0xddf6, 0xb96b, 0x416a, 0x0a2c, 0x272b, 0x2388, 0xadfc, 0xb3bf, 0x57dc, 0xde5a, 0x9c20, 0x0a06, 0xf6d1,
    0xda9c, 0x0d83, 0x60fb, 0x3abc, 0xc406, 0x3546, 0x3d63, 0x358f, 0xd7d8, 0xd387, 0x9500, 0x0c4e, 0xb55b, 0x6c98, 0x4b2e, 0x26d3,
    0x63a1, 0xfaa0, 0xc48f, 0x98d6, 0xc8d8, 0x826c, 0x37b1, 0x83c2, 0xf702, 0x7368, 0xdba1, 0xb1a2, 0x24bb, 0x8250, 0xb9c4, 0x97ae,
    0x7637, 0x9216, 0xf9ca, 0x48f5, 0xdb2a, 0x4c33, 0x2c0f, 0x80f0, 0xb6b3, 0xa7bf, 0xd9f9, 0x24aa, 0x648a, 0xf457, 0xe433, 0x64ed,
    0x566a, 0xdf4d, 0x4e78, 0xfb85, 0x3a48, 0xe2e0, 0x566b, 0x9a18, 0xb84f, 0xe381, 0xc32c, 0x2ed1, 0x8ae2, 0xa6d2, 0x9504, 0x20b1,
    0x4222, 0x79ea, 0x80f1, 0xe45b, 0x5938, 0xb9e5, 0x1b80, 0x4e12, 0x8aaa, 0x44eb, 0xe7f2, 0x48b5, 0x5883, 0xdda2, 0xc328, 0x5159,
    0x75cc, 0x788b, 0x6bf0, 0x1448, 0xd7cd, 0xc34f, 0xa2ca, 0x48d6, 0x1e54, 0x047d, 0x58a3, 0x9da0, 0x320c, 0x0d5e, 0x37cd, 0x6d4c,
    0xfceb, 0x8b99, 0xbfb2, 0x3adf, 0x29c3, 0xae02, 0xc490, 0x9a7b, 0xbd71, 0xc595, 0xfb9d, 0xf87f, 0x666d, 0xeef1, 0xf1c3, 0xceff,
    0xd19a, 0x5687, 0x973c, 0xf365, 0x560b, 0xfe99, 0x7488, 0x4831, 0xa80a, 0x509e, 0xdd2d, 0x79ac, 0x9add, 0x0fa0, 0x0a7a, 0x1faa,
    0x7e70, 0xcd4b, 0x905f, 0x0305, 0x7198, 0x1120, 0xa31d, 0x6cf6, 0x7967, 0x783c, 0x8843, 0x0d9e, 0x64bd, 0xb05a, 0xc656, 0x3eed,
    0x05e3, 0xab1c, 0x5758, 0xfed2, 0x38a8, 0xac61, 0x8911, 0x49b2, 0x7f10, 0x3a73, 0x8b2f, 0xe817, 0x47dc, 0xca75, 0xf53a, 0x2f3f,
    0xbf5e, 0x22e7, 0xdc3a, 0xb432, 0x2a83, 0xd6ac, 0xcca7, 0x551a, 0x0f63, 0x7750, 0x9513, 0x7c46, 0xa839, 0xf673, 0x5b0b, 0x8aba,
    */
    /*
    0x9af6, 0x26d6, 0xa414, 0xe94e, 0xd924, 0x0b5f, 0x61b3, 0xadaf, 0xb136, 0x0c19, 0xa6c6, 0x502f, 0xfddd, 0x29e4, 0xa897, 0x1685,
    0xe939, 0xfe99, 0x4b18, 0x79cf, 0x4e6d, 0x23bd, 0x6ae6, 0x2b61, 0x32c6, 0x2bb4, 0xdc45, 0xb1cd, 0x7e23, 0x204e, 0x7de7, 0x04a2,
    0x3856, 0x136e, 0x02e1, 0x1324, 0xf5ee, 0xb153, 0x7b2e, 0x1e91, 0x57cd, 0xba0d, 0x9ec3, 0xcba1, 0x3caa, 0xee66, 0x995a, 0xc4ae,
    0x6180, 0x0444, 0xe412, 0x8ba2, 0xc426, 0x188f, 0xe55a, 0x3371, 0xce13, 0xf131, 0xbbe3, 0xd8ad, 0x5fd3, 0xfeba, 0x70a7, 0xa962,
    0xb12c, 0x1680, 0x4f30, 0x084a, 0x2b2a, 0x4c16, 0x2292, 0x0f35, 0x4abc, 0x908b, 0xc537, 0x93d8, 0x88b3, 0xf378, 0x7184, 0xebaf,
    0xf051, 0x3755, 0x0ddb, 0x5aed, 0xa266, 0x3526, 0x5492, 0x599f, 0xf9a8, 0x19e0, 0xea2d, 0xffa4, 0x64c0, 0x13cb, 0x6baa, 0x746e,
    0xd58f, 0xebfb, 0x8172, 0x7d58, 0x7411, 0x5ed6, 0xc15c, 0x327a, 0x268c, 0x2385, 0xd0c1, 0x673b, 0x7d47, 0x5e2f, 0xab83, 0xcabc,
    0x1a30, 0xded4, 0xe08e, 0x7575, 0x5b92, 0x5387, 0xab4c, 0xa3ea, 0x6e40, 0x542e, 0xa59d, 0x561d, 0x90f7, 0x8f58, 0xc9e7, 0x974f,
    0x7b11, 0x2c69, 0x1ede, 0x3fe7, 0xd77a, 0x49bb, 0x19da, 0x8a75, 0x832a, 0x5cce, 0xf4fe, 0x91c6, 0xc68d, 0x678f, 0xac5e, 0x5e29,
    0x6107, 0x739a, 0xdc8a, 0x0440, 0x22ff, 0x06a2, 0xd44d, 0x6085, 0x3b66, 0xf44e, 0xbaae, 0x94d0, 0x76a6, 0x8f74, 0xe3c1, 0xf141,
    0x3037, 0x170d, 0x0283, 0xfac3, 0xbf15, 0x35da, 0xafe4, 0x8810, 0xdaed, 0x298f, 0xf58f, 0x190e, 0x473a, 0x75e6, 0xb1f6, 0x9f07,
    0x6f69, 0xc9dd, 0xebba, 0x2516, 0xe7ed, 0x2810, 0x9ccb, 0xaea0, 0xcca3, 0x4205, 0x812b, 0xf749, 0xfd4d, 0x8f94, 0xc3c0, 0xc181,
    0x7b1d, 0x4466, 0xca1d, 0xfd73, 0x46eb, 0x59fe, 0xa246, 0xc8b5, 0x37c4, 0x02a3, 0x7bb9, 0x147a, 0x0487, 0xf089, 0xec12, 0x13e9,
    0x37b1, 0x4837, 0xa45d, 0x2648, 0x3516, 0x5cd2, 0x27f3, 0x7281, 0x542f, 0x2178, 0x34d8, 0x88c6, 0xbe5d, 0x96ce, 0xa880, 0x1115,
    0xcc8e, 0x6015, 0xcd6b, 0x41db, 0x80d5, 0x571b, 0x6fc2, 0xbcd5, 0x64dc, 0x19d2, 0x4ad6, 0x3f42, 0x2dd6, 0xc3c3, 0xac24, 0x6b12,
    0x40dd, 0x51d8, 0x643d, 0x0601, 0xab0d, 0x807b, 0x6dd2, 0x0554, 0x4fca, 0xf2d2, 0x32e3, 0xb438, 0x57e1, 0x5fda, 0xbe1b, 0x7825,
    */
    /*
    0x6ca7, 0x96a7, 0xce46, 0x0943, 0x1ad8, 0xa02c, 0x538a, 0xac3e, 0x25a5, 0x7000, 0x62d1, 0x01c9, 0xe2d5, 0xab9d, 0x8571, 0x8caa,
    0xf947, 0x9c1c, 0x7fcb, 0xdb1a, 0x5d9d, 0xdc79, 0x655b, 0x158c, 0xd34d, 0xcbfa, 0xa09b, 0xaee7, 0x66b1, 0x9230, 0x6992, 0x5289,
    0x5ebc, 0x2118, 0xf1ea, 0x4dd7, 0x1b03, 0x4975, 0x583e, 0x80f8, 0x06f1, 0x4d05, 0x5c04, 0x8e5a, 0xd5a4, 0x14b8, 0x99a3, 0x8b48,
    0xcf4c, 0xf6c6, 0x4429, 0xc7b5, 0x09f4, 0x018e, 0x26f0, 0xe574, 0xd37a, 0xf35f, 0xb977, 0x81bc, 0x393c, 0xd1d7, 0xe3d9, 0x4720,
    0xebec, 0x99a2, 0xbacf, 0x5e68, 0x6928, 0x1269, 0x8e6b, 0x5810, 0xef0b, 0x7a32, 0xb509, 0x0699, 0x6f80, 0xea28, 0x79ad, 0xeb3c,
    0x96ba, 0x09a1, 0xa730, 0x73dc, 0x3166, 0x97a8, 0x9b71, 0xc84f, 0x2489, 0x9174, 0xc5c4, 0x6a14, 0x9a69, 0xb7bb, 0xc55a, 0xed11,
    0xdcee, 0x1037, 0xa23d, 0x2851, 0x681b, 0x4e9d, 0x5e73, 0x1f1e, 0xdc85, 0x4659, 0x4cd9, 0xe62c, 0x02fd, 0x8528, 0x029c, 0xae4f,
    0x4dd0, 0xe304, 0xff9b, 0x00a9, 0x4d44, 0x938f, 0x23db, 0xa481, 0x2c8a, 0xd803, 0x86f6, 0x9d6a, 0xa06a, 0xe680, 0x320c, 0x0018,
    0xea05, 0x7319, 0x23b1, 0x71ba, 0x2e32, 0x4130, 0x4b33, 0xcc57, 0x5ac4, 0x32e6, 0xef7b, 0x58c7, 0x0aef, 0x895c, 0xd53b, 0xc107,
    0x003a, 0x1c22, 0x6af9, 0xdc01, 0xdd1e, 0x090d, 0x0c62, 0xeb12, 0x98fb, 0xcab9, 0x3fde, 0xb547, 0xb44c, 0xfe6a, 0x2e85, 0x36f7,
    0xc909, 0xd837, 0x931b, 0xdcc1, 0xbbad, 0x3e14, 0x1326, 0x9696, 0x41d9, 0xeee6, 0xa0c9, 0x7603, 0xd5c2, 0x8814, 0x9e40, 0x3c19,
    0xda29, 0x3395, 0xa05f, 0xcc95, 0x8d4e, 0x4e61, 0xd47e, 0xd917, 0x9788, 0x8a12, 0x0d3b, 0xade9, 0xdb34, 0x8bd7, 0x1ee1, 0xb4b0,
    0xf1e3, 0x2d93, 0xee45, 0x6e50, 0x8c49, 0xa3fd, 0xfc9b, 0xf88a, 0x2bdd, 0x4a97, 0xedc8, 0xf0e0, 0x3342, 0x5c09, 0xaa3c, 0x7727,
    0x982b, 0x13a4, 0x83d8, 0xec60, 0x139e, 0x023c, 0xe415, 0x1091, 0xd997, 0x5941, 0xf279, 0xe1b2, 0x9260, 0xe0a3, 0x2cdc, 0x4673,
    0xdd18, 0x2446, 0xefb9, 0xe015, 0xbf75, 0xf8ae, 0x878e, 0x751b, 0xff41, 0x5ea1, 0x337a, 0x1466, 0x6ac8, 0x181d, 0x7a85, 0xfefd,
    0xfe98, 0x322a, 0xcbd4, 0xba3b, 0xd1a1, 0x87da, 0xda6f, 0xad21, 0x1e34, 0x11fa, 0x573e, 0x83b9, 0x799b, 0xe345, 0xb304, 0x003b,
    */
   /*
    0x9ed9, 0x9ad6, 0x2fa2, 0x172c, 0xc5dd, 0xe22b, 0x8554, 0xbb4e, 0xff9f, 0x42d6, 0x3eea, 0x139b, 0xde45, 0x3630, 0x00fc, 0xe618,
    0x0587, 0x6eb2, 0x0cea, 0x813c, 0x39fd, 0x6733, 0xe132, 0x5d7d, 0x1a0e, 0xb2ef, 0x81fc, 0xee3c, 0x1641, 0xc044, 0x9c8d, 0x5792,
    0xb2f7, 0xbbf2, 0xfb3f, 0xbf55, 0xb6b2, 0x7915, 0xba3b, 0xf4c4, 0x73a5, 0x501a, 0x0edb, 0x9c94, 0x3df0, 0x6098, 0xac53, 0xedb6,
    0x10cc, 0xd8c4, 0x1bde, 0xd691, 0x7602, 0xad0f, 0x0461, 0x1744, 0x0408, 0xbac6, 0x2db1, 0x27ed, 0xd380, 0x6bc9, 0x8b5c, 0x3152,
    0xecd5, 0xd67f, 0x7e4a, 0x184a, 0xb06b, 0x11e1, 0x256d, 0x692e, 0xcb93, 0x573e, 0xec3a, 0x0fc1, 0x7f66, 0x0658, 0xb09b, 0x3983,
    0x03a7, 0x670a, 0x07bd, 0xa1a5, 0x2d12, 0xe619, 0x01ac, 0xbd83, 0x9712, 0x2c3c, 0xbd47, 0xd412, 0xf5e5, 0x7b89, 0x2230, 0xda08,
    0xe677, 0xece2, 0x52da, 0x92a4, 0xfadc, 0x4d1f, 0x3792, 0x7e97, 0x3fa7, 0xdf34, 0x3e7b, 0x9a21, 0x6205, 0x5f95, 0x2c58, 0x2a58,
    0x5201, 0x377b, 0x7775, 0x4592, 0xe654, 0xa48f, 0x26c9, 0x5abe, 0xec37, 0xeac0, 0xe150, 0x15b2, 0xb978, 0xf37c, 0xb03c, 0x0ad1,
    0x9c42, 0x14f4, 0x98bf, 0x323a, 0x6f7e, 0x072f, 0xdbd5, 0x62da, 0x00f1, 0x6766, 0x4eec, 0x0cc6, 0xb5ad, 0x0c6e, 0xe353, 0x9445,
    0xa244, 0x8f79, 0xb162, 0x5c76, 0xbfae, 0x8cf8, 0x9c7b, 0xeb6c, 0xbe95, 0x3527, 0xd2ec, 0xab23, 0x61b0, 0x232e, 0xae26, 0xc889,
    0x4648, 0x413a, 0x44f2, 0x3c84, 0x331b, 0x3a32, 0x6b17, 0xad54, 0x55d9, 0x88dc, 0x626e, 0x832a, 0xe66e, 0x10a7, 0x488f, 0xff7d,
    0x0397, 0xbed0, 0x6012, 0xc05f, 0xc558, 0x38e7, 0xaf48, 0x2d28, 0x49a8, 0x738f, 0xc33c, 0xa38d, 0xc885, 0x0d48, 0xae7d, 0x2487,
    0xcb0b, 0x5652, 0x4ed4, 0x86ae, 0x9d6f, 0x1fa3, 0x3b85, 0x8426, 0xe3cf, 0xb839, 0x81d2, 0xfc72, 0x362c, 0x3549, 0xac64, 0xc608,
    0x31ba, 0x9d20, 0xaf26, 0x4f58, 0xf140, 0x66d3, 0xc718, 0x0d2b, 0x24cf, 0x73ce, 0xb474, 0x9c73, 0x79a7, 0x3e59, 0x3d51, 0xa45d,
    0xc229, 0xe581, 0xcc90, 0x6f07, 0xe960, 0xca31, 0xe2e8, 0x1b8d, 0xb3da, 0xdf7b, 0x0317, 0x10a2, 0xce23, 0x2c3e, 0x5ec1, 0xa20e,
    0x6ec6, 0xcdd8, 0x95c8, 0xca5d, 0x2698, 0x9a0a, 0x7abd, 0x17df, 0xc852, 0xff19, 0x6126, 0xac50, 0xde7f, 0x924e, 0x2593, 0xf12c,
*/
/*
    0x81f4, 0x2ca3, 0x2cab, 0xe10b, 0x8bea, 0xbd4f, 0x338b, 0x9b10, 0x29e7, 0x1e01, 0x38de, 0x0e19, 0xa9b5, 0xd92e, 0xa90b, 0xdc15,
    0x53aa, 0x23cf, 0x6c5b, 0x67df, 0x2523, 0x41b5, 0x8330, 0x8225, 0x385d, 0x860d, 0xd3a3, 0x8b57, 0x7f09, 0x054b, 0x264e, 0x05f7,
    0xd32f, 0x0480, 0xbfd9, 0xa0bf, 0x1102, 0x0a14, 0xcb7c, 0xfc48, 0x64ba, 0xcbd4, 0x6f0b, 0xf251, 0xf9a1, 0xdb9b, 0x7842, 0xf3c6,
    0x51d4, 0x21ba, 0xe5f5, 0x4eec, 0x7d9b, 0x9dc9, 0x892d, 0xaf5f, 0x131c, 0xea1f, 0xa415, 0x0e84, 0xcdd2, 0x6196, 0xe89d, 0xcce8,
    0x9e51, 0x2d7b, 0xd8aa, 0xcf05, 0xda02, 0xb872, 0x0d21, 0xdb70, 0xb7c6, 0x53ca, 0x007b, 0xe2a4, 0x8654, 0xfefb, 0xc3bc, 0x86af,
    0x46d6, 0xe605, 0xe583, 0x7f93, 0xba56, 0x4752, 0x7d63, 0xf5a7, 0xc9c3, 0x9932, 0x3053, 0xcc81, 0xe7d9, 0xe710, 0x47bf, 0x1764,
    0x2ee3, 0x0a81, 0x1ee9, 0x4f84, 0x0b88, 0x0a15, 0x2a2f, 0x43ff, 0x4656, 0x644e, 0x0c29, 0x2ddb, 0x1156, 0xec6f, 0xe4b6, 0xd201,
    0xbbb2, 0x9093, 0x6938, 0x4093, 0x56ca, 0x1a33, 0x5b0e, 0x0854, 0xe3ef, 0x3525, 0xd793, 0x8a15, 0x3147, 0x9596, 0xc769, 0x82d1,
    0x8efc, 0x1925, 0x6fa1, 0x30c2, 0x2c92, 0x4c02, 0x952c, 0x33a9, 0x0a90, 0x3d2c, 0x9ea6, 0xee9d, 0xde6a, 0xc41d, 0x1700, 0x26e7,
    0x1352, 0x4de2, 0x8822, 0xea89, 0xd523, 0x5779, 0x7721, 0xfae7, 0x0953, 0xafbf, 0xfdc7, 0xd74c, 0x4587, 0x8765, 0xd8c1, 0x9297,
    0x8fd1, 0x6819, 0x4d48, 0x631f, 0xac53, 0xcf74, 0xd28f, 0x1470, 0x6339, 0xeaf7, 0x66bd, 0xb3cb, 0xc56d, 0x466c, 0xb279, 0x7d64,
    0x325b, 0x0c11, 0x6716, 0xc546, 0x88f1, 0x446d, 0xe876, 0xe73c, 0x3d14, 0x109f, 0x35cf, 0xaf51, 0x97ba, 0x1486, 0x04e4, 0xeec9,
    0xc8ba, 0x20d6, 0xd161, 0xf7ed, 0xe4ef, 0x9b0e, 0x90b3, 0x88cc, 0xaab8, 0x397e, 0x37d9, 0x8ec8, 0xf1bb, 0x312a, 0xb6ec, 0x3ef9,
    0x699e, 0x7971, 0x10d4, 0xb117, 0x79b1, 0xf651, 0x678c, 0x40ac, 0xb4e5, 0x6158, 0xb84f, 0xe61d, 0xda34, 0x4622, 0x2040, 0xeec5,
    0x6d94, 0x1093, 0xd463, 0xfe3e, 0x141e, 0x6b1e, 0xc5ea, 0xef23, 0x172c, 0xf77c, 0x9ed6, 0x5643, 0x2565, 0x8f04, 0xe461, 0x4963,
    0x1d8b, 0x8944, 0x1eed, 0x738e, 0x62eb, 0xb299, 0x4bbc, 0x19e0, 0x2325, 0x3023, 0xf50c, 0x5b62, 0xe4e7, 0xb6e4, 0x5014, 0x2f32,
*/
    // 0xfa98
    0x4212, 0xbcc0, 0x9cbe, 0x7079, 0x054c, 0x058d, 0x9626, 0x2cc1, 0x27b0, 0x4b6c, 0x278a, 0x1c25, 0x06c7, 0xc643, 0xaf50, 0x9a77,
    0x2fb4, 0xe8cc, 0xaeb1, 0xf4f8, 0x4ec9, 0x9073, 0x3e15, 0x55ab, 0x516a, 0xc2d5, 0x27dd, 0x0b27, 0xd6df, 0xa878, 0x4763, 0x283e,
    0x49c9, 0xec83, 0xede2, 0xe9c7, 0xee4e, 0xab13, 0x71f0, 0xb311, 0xa9e4, 0xad4f, 0x1769, 0x28a7, 0xa6f9, 0xfb47, 0x0216, 0xc083,
    0x2173, 0xbea8, 0xa374, 0xe1c5, 0x49f9, 0x010b, 0x031e, 0xbb58, 0x795d, 0x45ab, 0xd285, 0xab23, 0x39d8, 0x0fe4, 0xe1ae, 0x845f,
    0x7507, 0x25b2, 0x55ca, 0xde70, 0xac21, 0x08ad, 0xc500, 0xa3ba, 0xee72, 0xd183, 0x53c2, 0xfa5d, 0x2485, 0x9e1b, 0x9954, 0xdf63,
    0xe5a2, 0x2223, 0x2e8c, 0x4709, 0x905d, 0x2220, 0x30f0, 0x615e, 0x2ca3, 0x1f9f, 0x94bd, 0x698a, 0xdf16, 0x5edd, 0xba0c, 0x4908,
    0x6aa8, 0xfb65, 0x5f8b, 0xec9c, 0x3800, 0xe4cd, 0xae4c, 0x230e, 0x0c74, 0x10c6, 0xdcd3, 0x226f, 0x5c75, 0x35de, 0x7326, 0x3eef,
    0x8ffb, 0x5930, 0xfa98, 0x9fea, 0xfa99, 0x5f6a, 0x92d9, 0x7e73, 0x5c17, 0xca5c, 0x7b8b, 0xab2d, 0xad05, 0xd45a, 0x54cd, 0x5e65,
    0x3bef, 0xdafe, 0xe725, 0x85a0, 0xa010, 0x950f, 0x5470, 0x59a8, 0x05a0, 0xe673, 0xd223, 0xc789, 0xf304, 0xd5f5, 0xc88c, 0xc51a,
    0x8e09, 0xb146, 0xf0b2, 0xedab, 0x4652, 0xa3f5, 0x823f, 0xe611, 0xd92c, 0x048d, 0x04be, 0x3159, 0x558b, 0xa67d, 0x8af9, 0x38d4,
    0xa16d, 0xe564, 0x8e37, 0x5988, 0xdd7f, 0x79f5, 0x90ac, 0x631f, 0x4fde, 0x6774, 0x7bba, 0x237c, 0xd3be, 0x0da8, 0xf3fe, 0x3dce,
    0x820a, 0x83c0, 0xfb21, 0x88b4, 0x59a3, 0x63f7, 0x4d7d, 0xe6c8, 0xc501, 0x7d0c, 0x68c6, 0x6c07, 0x408a, 0x82d5, 0x63b1, 0x5956,
    0xecbd, 0x3c26, 0x7d2f, 0x99d4, 0x5f65, 0x9c5c, 0x2579, 0x308c, 0x132d, 0x7435, 0x40ef, 0xb7ea, 0x67ba, 0xb49c, 0x1ce1, 0x278c,
    0xc4c2, 0x94d9, 0x617b, 0x94a9, 0xcb6e, 0x3aaf, 0xfe28, 0xc705, 0xdfc1, 0x793d, 0xc083, 0x8fee, 0xb54a, 0x199e, 0x1628, 0xaafd,
    0xf4dd, 0x36b0, 0x4d9e, 0xc05d, 0x5bfa, 0x3594, 0x5410, 0xfc1d, 0x2d16, 0x626b, 0x1a31, 0x2572, 0x504b, 0xbebd, 0x4e8d, 0x9ad8,
    0xd879, 0x659a, 0xdf14, 0x504d, 0x59aa, 0x486a, 0x8f8f, 0x3ff5, 0x84d9, 0x3b33, 0xb0df, 0xd8c9, 0x27b2, 0x291d, 0xed2d, 0x7c1a,
]

for (const e of t) {
    add(e)
    console.log()
    console.log(`## ${e.toString(16)}`)
    console.log()
    print()
}
